allprojects {
    apply plugin: 'idea'
    group 'me.ddevil'
    version '3.1.0-SNAPSHOT'
}
buildscript {
    ext.kotlin_version = '1.1.0'

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://dl.bintray.com/kotlin/kotlin-eap-1.1"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

def notToPublish = Arrays.asList(["server", "commons"] as String[])

setup(rootProject)

def setup(project) {
    println "shiroi-framework-$project.name"
    if (project.childProjects.isEmpty()) {
        project.plugins.apply('maven-publish')
        project.plugins.apply('java')
        project.plugins.apply('kotlin')
        project.plugins.apply('idea')
        project.sourceCompatibility = 1.8
        project.targetCompatibility = 1.8
        project.compileJava.options.encoding = 'UTF-8'

        project.publishing {
            publications {
                mavenJava(MavenPublication) {
                    from project.components.java
                    artifactId "shiroi-framework-$project.name"
                }
            }
            repositories {
                maven {
                    url 'file://' + rootDir + "/publication"
                }
            }
        }
        project.repositories {
            mavenCentral()
            mavenLocal()
            //Spigot things
            maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
            maven { url 'http://repo.dmulloy2.net/content/groups/public/' }
            //Shiroi
            maven { url 'http://dev.dcgo.me:8081/repository/maven-snapshots/' }
            //JNBT
            maven { url 'http://maven.angry.com.au/release' }
            //Task Chain
            maven { url 'http://ci.emc.gs/nexus/content/groups/aikar/' }
        }

        project.tasks.withType(Jar) {
            destinationDir = file("$rootDir/output")
        }
    } else {
        project.childProjects.each { p ->
            setup(p.value)
        }
    }
}